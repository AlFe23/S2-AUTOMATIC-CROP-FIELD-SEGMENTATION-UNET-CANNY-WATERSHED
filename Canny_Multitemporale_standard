//--------Edge detection con Canny multitemporale --------//
//------------------------- Versione Standard-----------------------------
//--------------------------------------------------------------

/*
Questa versione del codice fa in modo tale da scalare NDVI ed NDWI dall'intervallo originale (-1,1) all'intervallo 0-65535 in modo tale da poter salvare il dato in uint16:
To convert your NDVI and NDWI index data from float32 to uint16 while preserving the original information, you need to choose an appropriate scaling factor. This factor must map the original range of each index to the range that uint16 can represent (0 to 65535).
*/

// Define AOI as Iowa State using TIGER/2018/States
var aoi = ee.FeatureCollection('TIGER/2018/States')
  .filter(ee.Filter.eq('NAME', 'Iowa'));

// Now you can visualize the AOI on the Map to confirm it's correct
Map.addLayer(aoi, {color: 'green'}, 'AOI - Iowa');
Map.centerObject(aoi);


// Define dates of interest
var start = ee.Date('2020-04-01');
var end = ee.Date ('2020-11-30');
/*
//function that adds the NDVI as a new band to the image
function addnd(input) {
  var nd = input.normalizedDifference(['B8', 'B4']).rename('NDVI');
  return input.addBands(nd);
}
var ndvi_palette = 'FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400, ' + '3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301';


//function that adds the NDWI as a new band to the image
//var ndwiViz = {min: 0.5, max: 1, palette: ['00FFFF', '0000FF']};
function addndwi(input) {
  var ndwi = input.normalizedDifference(['B3', 'B8']).rename('NDWI');
  return input.addBands(ndwi);
}
var ndwi_palette = 'ff3f06, f0ff06, 08ff26, 0afff4, 0625ff';
*/
// Adjust the addnd and addndwi functions to include scaling
function addnd(input) {
  var nd = input.normalizedDifference(['B8', 'B4']).rename('NDVI');
  var scaled_nd = nd.multiply(32767.5).add(32767.5).toUint16(); // Scale NDVI
  return input.addBands(scaled_nd);
}

function addndwi(input) {
  var ndwi = input.normalizedDifference(['B3', 'B8']).rename('NDWI');
  var scaled_ndwi = ndwi.multiply(32767.5).add(32767.5).toUint16(); // Scale NDWI
  return input.addBands(scaled_ndwi);
}
var ndvi_palette = 'FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400, ' + '3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301';
var ndwi_palette = 'ff3f06, f0ff06, 08ff26, 0afff4, 0625ff';

// Import S2 BOA reflectance with clouds

var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterMetadata('CLOUDY_PIXEL_PERCENTAGE', 'less_than', 50)
  .filterMetadata('MGRS_TILE', 'equals', '15TWG') // necessario evitare tiles 20JML che coprono solo parzialmente la zona di interesse
  .filter(ee.Filter.eq('SENSING_ORBIT_NUMBER', 69))
  .map(addnd)
  .map(addndwi)
  .filterDate(start, end)
  //.map(function(image){return image.clip(aoi_extended)}) ;
print(s2, "S2 collection")

var listOfImages = s2.toList(s2.size());
print('listOfImages_s2:',listOfImages)
/*
Map.addLayer(ee.Image(listOfImages.get(0)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
Map.addLayer(ee.Image(listOfImages.get(1)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
Map.addLayer(ee.Image(listOfImages.get(2)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
Map.addLayer(ee.Image(listOfImages.get(3)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
Map.addLayer(ee.Image(listOfImages.get(4)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
Map.addLayer(ee.Image(listOfImages.get(5)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
Map.addLayer(ee.Image(listOfImages.get(6)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
Map.addLayer(ee.Image(listOfImages.get(7)), {bands: 'B4,B3,B2', min: 0, max: 2300},'RGB con nuvole'); 
*/


// Import S2 BOA reflectance without clouds (clear sky)

var s2clearsky = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterMetadata('CLOUDY_PIXEL_PERCENTAGE', 'less_than', 0.5)
  .filterMetadata('MGRS_TILE', 'equals', '15TWG') // necessario evitare tiles 20JML che coprono solo parzialmente la zona di interesse
  .filter(ee.Filter.eq('SENSING_ORBIT_NUMBER', 69))
  .map(addnd)
  .map(addndwi)
  .filterDate(start, end)
  //.map(function(image){return image.clip(aoi_extended)}) ;
print(s2clearsky, "s2clearsky collection")



var listOfImages_clearsky = s2clearsky.toList(s2clearsky.size());
print('listOfImages_clearsky:',listOfImages_clearsky)
Map.addLayer(ee.Image(listOfImages_clearsky.get(0)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');
Map.addLayer(ee.Image(listOfImages_clearsky.get(1)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');
Map.addLayer(ee.Image(listOfImages_clearsky.get(2)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');
//Map.addLayer(ee.Image(listOfImages_clearsky.get(3)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');
//Map.addLayer(ee.Image(listOfImages_clearsky.get(4)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');
//Map.addLayer(ee.Image(listOfImages_clearsky.get(5)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');
//Map.addLayer(ee.Image(listOfImages_clearsky.get(6)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');
//Map.addLayer(ee.Image(listOfImages_clearsky.get(7)), {bands: 'B4,B3,B2', min: 0, max: 2300}, 'RGB senza nuvole');


/*
///Create a sub-collection with most homogeneous images in order to optimize the extraction of boundary edges 
///minimizing the edges due to inhomogeneous fields

var good_images_list = ee.List([0,1,2,8,12]); //these images were chosen through visual inspection seeking for maximum homogeneity of the fields
print('good images list: ',good_images_list);

function getImages(list){
var img = ee.Image(listOfImages_clearsky.get(list));
return img;
} 

var goodImagesCollection = ee.ImageCollection.fromImages(good_images_list.map(getImages));
print('good images list: ', goodImagesCollection);

*/

//________________ Edge Detection with cloud masking   ____________________________________________

// function to Apply a Canny edge detector at each NDVI image of s2 collection and apply the buffered cloud mask at the end of the edge detection process

var canny_NDVI = function(image) { 
  var scl = image.select('SCL');
  var clear_sky_pixels = scl.eq(0).or(scl.eq(1)).or(scl.eq(2)).or(scl.eq(4)).or(scl.eq(5)).or(scl.eq(6)).or(scl.eq(7)).or(scl.eq(10)).or(scl.eq(11))
  var masked = image.updateMask(clear_sky_pixels)
  var mask = masked.mask().reduce(ee.Reducer.min())
  var buffer_bad = mask
    .focal_min({radius: 1000, units: 'meters'})
  var canny = ee.Algorithms.CannyEdgeDetector({
  image: image.select("NDVI"),
  threshold: 0.25,    // con NDWI porre 0.2 per singola immagine e 0.3 per multi
  sigma: 1.5
  }).multiply(255)
 return canny.updateMask(buffer_bad)
}
var canny_collection_NDVI = s2.map(canny_NDVI)
print(canny_collection_NDVI,'canny_collection_NDVI')




var listOfImages_cannyndvi = canny_collection_NDVI.toList(canny_collection_NDVI.size());
var canny_to_print = ee.Image(listOfImages_cannyndvi.get(2));
//Map.addLayer(canny_to_print.updateMask(canny_to_print), {min: 0, max: 1, palette: 'white'}, 'canny_to_print'); 

// function to Apply a Canny edge detector at each NDWI image of s2Mosaic collection and apply the buffered cloud mask at the end of the edge detection process

var canny_NDWI = function(image) { 
  var scl = image.select('SCL');
  var clear_sky_pixels = scl.eq(4).or(scl.eq(5)).or(scl.eq(6)).or(scl.eq(7))
  var masked = image.updateMask(clear_sky_pixels)
  var mask = masked.mask().reduce(ee.Reducer.min())
  var buffer_bad = mask
    .focal_min({radius: 1000, units: 'meters'})
 return ee.Algorithms.CannyEdgeDetector({
  image: image.select("NDWI"),
  threshold: 0.25,    // con NDWI porre 0.2 per singola immagine e 0.3 per multi
  sigma: 1.5
  }).multiply(255).updateMask(buffer_bad)
}
var canny_collection_NDWI = s2.map(canny_NDWI)
print(canny_collection_NDWI,'canny_collection_NDWI')




//________________ Edge Detection for clear sky images   ____________________________________________

//there is some points identified as clouds even in images completely clear of clouds. the cloud mask buffering for these points 
//brings to a total absence of information in those regions. Hence we need to extract the mask for completely clear sky images 
//without applying any mask buffering and overlay it together with the masked-buffered collection.

// function to Apply a Canny edge detector at each NDVI image of s2 collection

var canny_NDVI_clearsky = function(image) { 
  var canny = ee.Algorithms.CannyEdgeDetector({
  image: image.select("NDVI"),
  threshold: 0.25,    // con NDWI porre 0.2 per singola immagine e 0.3 per multi
  sigma: 1.5
  }).multiply(255)
 return canny;
}
var canny_collection_NDVI_clearsky = s2clearsky.map(canny_NDVI_clearsky)
print(canny_collection_NDVI_clearsky,'canny_collection_NDVI_clearsky')

var listOfImages_cannyndvi_clearsky = canny_collection_NDVI_clearsky.toList(canny_collection_NDVI_clearsky.size());
var canny_to_print_clearsky = ee.Image(listOfImages_cannyndvi_clearsky.get(0));
//Map.addLayer(canny_to_print_clearsky.updateMask(canny_to_print_clearsky), {min: 0, max: 1, palette: 'white'}, 'canny_to_print'); 

// function to Apply a Canny edge detector at each NDWI image of s2 collection 

var canny_NDWI_clearsky = function(image) { 
 return ee.Algorithms.CannyEdgeDetector({
  image: image.select("NDWI"),
  threshold: 0.25,    // con NDWI porre 0.2 per singola immagine e 0.3 per multi
  sigma: 1.5
  }).multiply(255)
}
var canny_collection_NDWI_clearsky = s2clearsky.map(canny_NDWI_clearsky)
print(canny_collection_NDWI_clearsky,'canny_collection_NDWI_clearsky')



//Merge Canny collections without cloud masking only
var canny_stack = canny_collection_NDVI_clearsky.merge(canny_collection_NDWI_clearsky)
print(canny_stack,'canny_stack')

/*
//Merge all collections of Canny images
var canny_stack = canny_collection_NDVI.merge(canny_collection_NDWI).merge(canny_collection_NDVI_clearsky).merge(canny_collection_NDWI_clearsky)
print(canny_stack,'canny_stack')
*/

//In order to overlay all the canny images applying a simple sum all the bands to be summed must 
//have the same name hence we define a function to rename all the bands of the merged collection 
//with the same name, as follows:

var canny_stack_bands_renaming = function(image) { 
 return image.rename("canny_edge")
}
//rinominiamo le bande di tutte le immagini nello stack
var canny_stack_renamed = canny_stack.map(canny_stack_bands_renaming)
print(canny_stack_renamed,'canny_stack_renamed')


// Perform Aggregation for canny images
var canny_combo_overlayed = canny_stack_renamed.reduce(ee.Reducer.sum());
print(canny_combo_overlayed,'canny_combo_overlayed (boolean sum of all canny images')
//Map.addLayer(canny_combo_overlayed.updateMask(canny_combo_overlayed), {min: 0, max: 1, palette: 'white'}, 'canny_combo_overlayed');
Map.addLayer(canny_combo_overlayed, {}, 'canny_combo_overlayed');


//////////////////////////////////////////////////////////////////////////////////
//--------------------Downloads (Export to Google Drive)--------------------------

var dl_geometry = canny_collection_NDVI_clearsky.geometry();
//Map.addLayer(dl_geometry, {color: 'white', strokeWidth: 5}, 'dl_geometry', true, 0.6);


//EXPORT IMAGE into DRIVE
Export.image.toDrive({
  image: canny_combo_overlayed.uint8(),
  description: 'IOWA_15TWG_canny_2021_NDVIth025_NDWIth025_sigma1dot5_optimized',
  scale: 10,
  //region: aoi,
  region: dl_geometry,
  maxPixels: 1e13,
  crs:'EPSG:4326',
  folder:'UNET_DATASET_IOWA',
  fileNamePrefix:'IOWA_15TWG_canny_2021_NDVIth025_NDWIth025_sigma1dot5_optimized'
});





var img = ee.Image(listOfImages_clearsky.get(2))
/*
Export.image.toDrive({
  image: img.select('B4','B3','B2'),
  description: 'RGB_IOWA_15TWG_20211018',
  scale: 10,
  //region: aoi,
  region: dl_geometry,
  maxPixels: 1e13,
  crs:'EPSG:4326',
  folder:'UNET_DATASET_IOWA',
  fileNamePrefix:'RGB_IOWA_15TWG_20211018'
});

/*
Export.image.toDrive({
  image: img.select('B2','NDVI','NDWI').toFloat(),
  description: 'IMG_IOWA_15TWG_20211018',
  scale: 10,
  //region: aoi,
  region: dl_geometry,
  maxPixels: 1e13,
  crs:'EPSG:4326',
  folder:'UNET_DATASET_IOWA',
  fileNamePrefix:'IMG_IOWA_15TWG_20211018'
});
*/

//ATTENZIONE: l'output salvato con il seguente comando contiene B2 (0-10000), NDVI (0-65535), NDWI (0-65535). 
// qualora si volesse ricondurre all'intervallo 0-1 per la riflettanza e (-1,1) per gli indici, sarebbe necessario scalarli linearmente tra questi intervalli.
Export.image.toDrive({
  image: img.select('B2','NDVI','NDWI').toUint16(),
  description: 'IMG_IOWA_15TWG_20201008',
  scale: 10,
  //region: aoi,
  region: dl_geometry,
  maxPixels: 1e13,
  crs:'EPSG:4326',
  folder:'UNET_DATASET_IOWA',
  fileNamePrefix:'IMG_IOWA_15TWG_20201008'
});
